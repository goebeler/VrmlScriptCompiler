Terminals unused in grammar

    "-"
    "*"
    "/"


Rules useless in parser due to conflicts

   13 statements: %empty


State 0 conflicts: 1 shift/reduce
State 14 conflicts: 4 shift/reduce, 9 reduce/reduce
State 29 conflicts: 5 shift/reduce, 2 reduce/reduce
State 30 conflicts: 2 reduce/reduce
State 40 conflicts: 1 shift/reduce


Grammar

    0 $accept: unit "end of file"

    1 unit: functions

    2 functions: functions function
    3          | function
    4          | %empty

    5 function: "function" "identifier" "(" args ")" statement

    6 args: args "," "identifier"
    7     | "identifier"
    8     | %empty

    9 statement_block: "{" statements "}"
   10                | %empty

   11 statements: statements statement
   12           | statement
   13           | %empty

   14 statement: exp ";"
   15          | statement_block

   16 variable: "identifier"

   17 leftexp: variable

   18 assignment: leftexp "=" exp

   19 parameters: parameters "," exp
   20           | exp
   21           | %empty

   22 functioncall: "identifier" "(" parameters ")" ";"

   23 intConstant: "number"

   24 binArithExp: exp "+" exp

   25 exp: intConstant
   26    | assignment
   27    | binArithExp
   28    | variable
   29    | "(" exp ")"
   30    | functioncall
   31    | %empty


Terminals, with rules where they appear

    "end of file" (0) 0
    error (256)
    "=" (258) 18
    "-" (259)
    "+" (260) 24
    "*" (261)
    "/" (262)
    "(" (263) 5 22 29
    ")" (264) 5 22 29
    "{" (265) 9
    "}" (266) 9
    "," (267) 6 19
    ";" (268) 14 22
    "function" (269) 5
    "identifier" <std::string> (270) 5 6 7 16 22
    "number" <int> (271) 23


Nonterminals, with rules where they appear

    $accept (17)
        on left: 0
    intConstant <vrmlast::IntConstantExpression*> (18)
        on left: 23
        on right: 25
    functions <vrmlast::FunctionDefinitionList*> (19)
        on left: 2 3 4
        on right: 1 2
    function <vrmlast::FunctionDefinition*> (20)
        on left: 5
        on right: 2 3
    exp <vrmlast::Expression*> (21)
        on left: 25 26 27 28 29 30 31
        on right: 14 18 19 20 24 29
    functioncall <vrmlast::Expression*> (22)
        on left: 22
        on right: 30
    leftexp <vrmlast::Expression*> (23)
        on left: 17
        on right: 18
    statement <vrmlast::Statement*> (24)
        on left: 14 15
        on right: 5 11 12
    statements <vrmlast::StatementList*> (25)
        on left: 11 12 13
        on right: 9 11
    statement_block <vrmlast::Block*> (26)
        on left: 9 10
        on right: 15
    args <vrmlast::ArgumentList*> (27)
        on left: 6 7 8
        on right: 5 6
    parameters <vrmlast::ParameterList*> (28)
        on left: 19 20 21
        on right: 19 22
    assignment <vrmlast::AssignmentExpression*> (29)
        on left: 18
        on right: 26
    variable <vrmlast::VariableExpression*> (30)
        on left: 16
        on right: 17 28
    unit <vrmlast::Script*> (31)
        on left: 1
        on right: 0
    binArithExp <vrmlast::BinaryArithmeticExpression*> (32)
        on left: 24
        on right: 27


State 0

    0 $accept: . unit "end of file"
    1 unit: . functions
    2 functions: . functions function
    3          | . function
    4          | . %empty  ["end of file", "function"]
    5 function: . "function" "identifier" "(" args ")" statement

    "function"  shift, and go to state 1

    "function"  [reduce using rule 4 (functions)]
    $default    reduce using rule 4 (functions)

    functions  go to state 2
    function   go to state 3
    unit       go to state 4


State 1

    5 function: "function" . "identifier" "(" args ")" statement

    "identifier"  shift, and go to state 5


State 2

    1 unit: functions .  ["end of file"]
    2 functions: functions . function
    5 function: . "function" "identifier" "(" args ")" statement

    "function"  shift, and go to state 1

    $default  reduce using rule 1 (unit)

    function  go to state 6


State 3

    3 functions: function .

    $default  reduce using rule 3 (functions)


State 4

    0 $accept: unit . "end of file"

    "end of file"  shift, and go to state 7


State 5

    5 function: "function" "identifier" . "(" args ")" statement

    "("  shift, and go to state 8


State 6

    2 functions: functions function .

    $default  reduce using rule 2 (functions)


State 7

    0 $accept: unit "end of file" .

    $default  accept


State 8

    5 function: "function" "identifier" "(" . args ")" statement
    6 args: . args "," "identifier"
    7     | . "identifier"
    8     | . %empty  [")", ","]

    "identifier"  shift, and go to state 9

    $default  reduce using rule 8 (args)

    args  go to state 10


State 9

    7 args: "identifier" .

    $default  reduce using rule 7 (args)


State 10

    5 function: "function" "identifier" "(" args . ")" statement
    6 args: args . "," "identifier"

    ")"  shift, and go to state 11
    ","  shift, and go to state 12


State 11

    5 function: "function" "identifier" "(" args ")" . statement
    9 statement_block: . "{" statements "}"
   10                | . %empty  ["end of file", "function"]
   14 statement: . exp ";"
   15          | . statement_block
   16 variable: . "identifier"
   17 leftexp: . variable
   18 assignment: . leftexp "=" exp
   22 functioncall: . "identifier" "(" parameters ")" ";"
   23 intConstant: . "number"
   24 binArithExp: . exp "+" exp
   25 exp: . intConstant
   26    | . assignment
   27    | . binArithExp
   28    | . variable
   29    | . "(" exp ")"
   30    | . functioncall
   31    | . %empty  ["+", ";"]

    "("           shift, and go to state 13
    "{"           shift, and go to state 14
    "identifier"  shift, and go to state 15
    "number"      shift, and go to state 16

    "+"       reduce using rule 31 (exp)
    ";"       reduce using rule 31 (exp)
    $default  reduce using rule 10 (statement_block)

    intConstant      go to state 17
    exp              go to state 18
    functioncall     go to state 19
    leftexp          go to state 20
    statement        go to state 21
    statement_block  go to state 22
    assignment       go to state 23
    variable         go to state 24
    binArithExp      go to state 25


State 12

    6 args: args "," . "identifier"

    "identifier"  shift, and go to state 26


State 13

   16 variable: . "identifier"
   17 leftexp: . variable
   18 assignment: . leftexp "=" exp
   22 functioncall: . "identifier" "(" parameters ")" ";"
   23 intConstant: . "number"
   24 binArithExp: . exp "+" exp
   25 exp: . intConstant
   26    | . assignment
   27    | . binArithExp
   28    | . variable
   29    | . "(" exp ")"
   29    | "(" . exp ")"
   30    | . functioncall
   31    | . %empty  ["+", ")"]

    "("           shift, and go to state 13
    "identifier"  shift, and go to state 15
    "number"      shift, and go to state 16

    $default  reduce using rule 31 (exp)

    intConstant   go to state 17
    exp           go to state 27
    functioncall  go to state 19
    leftexp       go to state 20
    assignment    go to state 23
    variable      go to state 24
    binArithExp   go to state 25


State 14

    9 statement_block: . "{" statements "}"
    9                | "{" . statements "}"
   10                | . %empty  ["+", "(", "{", "}", ";", "identifier", "number"]
   11 statements: . statements statement
   12           | . statement
   13           | . %empty  ["+", "(", "{", "}", ";", "identifier", "number"]
   14 statement: . exp ";"
   15          | . statement_block
   16 variable: . "identifier"
   17 leftexp: . variable
   18 assignment: . leftexp "=" exp
   22 functioncall: . "identifier" "(" parameters ")" ";"
   23 intConstant: . "number"
   24 binArithExp: . exp "+" exp
   25 exp: . intConstant
   26    | . assignment
   27    | . binArithExp
   28    | . variable
   29    | . "(" exp ")"
   30    | . functioncall
   31    | . %empty  ["+", ";"]

    "("           shift, and go to state 13
    "{"           shift, and go to state 14
    "identifier"  shift, and go to state 15
    "number"      shift, and go to state 16

    "+"           reduce using rule 10 (statement_block)
    "+"           [reduce using rule 13 (statements)]
    "+"           [reduce using rule 31 (exp)]
    "("           [reduce using rule 10 (statement_block)]
    "("           [reduce using rule 13 (statements)]
    "{"           [reduce using rule 10 (statement_block)]
    "{"           [reduce using rule 13 (statements)]
    "}"           reduce using rule 10 (statement_block)
    "}"           [reduce using rule 13 (statements)]
    ";"           reduce using rule 10 (statement_block)
    ";"           [reduce using rule 13 (statements)]
    ";"           [reduce using rule 31 (exp)]
    "identifier"  [reduce using rule 10 (statement_block)]
    "identifier"  [reduce using rule 13 (statements)]
    "number"      [reduce using rule 10 (statement_block)]
    "number"      [reduce using rule 13 (statements)]
    $default      reduce using rule 10 (statement_block)

    intConstant      go to state 17
    exp              go to state 18
    functioncall     go to state 19
    leftexp          go to state 20
    statement        go to state 28
    statements       go to state 29
    statement_block  go to state 22
    assignment       go to state 23
    variable         go to state 24
    binArithExp      go to state 25


State 15

   16 variable: "identifier" .  ["=", "+", ")", ",", ";"]
   22 functioncall: "identifier" . "(" parameters ")" ";"

    "("  shift, and go to state 30

    $default  reduce using rule 16 (variable)


State 16

   23 intConstant: "number" .

    $default  reduce using rule 23 (intConstant)


State 17

   25 exp: intConstant .

    $default  reduce using rule 25 (exp)


State 18

   14 statement: exp . ";"
   24 binArithExp: exp . "+" exp

    "+"  shift, and go to state 31
    ";"  shift, and go to state 32


State 19

   30 exp: functioncall .

    $default  reduce using rule 30 (exp)


State 20

   18 assignment: leftexp . "=" exp

    "="  shift, and go to state 33


State 21

    5 function: "function" "identifier" "(" args ")" statement .

    $default  reduce using rule 5 (function)


State 22

   15 statement: statement_block .

    $default  reduce using rule 15 (statement)


State 23

   26 exp: assignment .

    $default  reduce using rule 26 (exp)


State 24

   17 leftexp: variable .  ["="]
   28 exp: variable .  ["+", ")", ",", ";"]

    "="       reduce using rule 17 (leftexp)
    $default  reduce using rule 28 (exp)


State 25

   27 exp: binArithExp .

    $default  reduce using rule 27 (exp)


State 26

    6 args: args "," "identifier" .

    $default  reduce using rule 6 (args)


State 27

   24 binArithExp: exp . "+" exp
   29 exp: "(" exp . ")"

    "+"  shift, and go to state 31
    ")"  shift, and go to state 34


State 28

   12 statements: statement .

    $default  reduce using rule 12 (statements)


State 29

    9 statement_block: . "{" statements "}"
    9                | "{" statements . "}"
   10                | . %empty  ["+", "(", "{", "}", ";", "identifier", "number"]
   11 statements: statements . statement
   14 statement: . exp ";"
   15          | . statement_block
   16 variable: . "identifier"
   17 leftexp: . variable
   18 assignment: . leftexp "=" exp
   22 functioncall: . "identifier" "(" parameters ")" ";"
   23 intConstant: . "number"
   24 binArithExp: . exp "+" exp
   25 exp: . intConstant
   26    | . assignment
   27    | . binArithExp
   28    | . variable
   29    | . "(" exp ")"
   30    | . functioncall
   31    | . %empty  ["+", ";"]

    "("           shift, and go to state 13
    "{"           shift, and go to state 14
    "}"           shift, and go to state 35
    "identifier"  shift, and go to state 15
    "number"      shift, and go to state 16

    "+"           reduce using rule 10 (statement_block)
    "+"           [reduce using rule 31 (exp)]
    "("           [reduce using rule 10 (statement_block)]
    "{"           [reduce using rule 10 (statement_block)]
    "}"           [reduce using rule 10 (statement_block)]
    ";"           reduce using rule 10 (statement_block)
    ";"           [reduce using rule 31 (exp)]
    "identifier"  [reduce using rule 10 (statement_block)]
    "number"      [reduce using rule 10 (statement_block)]
    $default      reduce using rule 10 (statement_block)

    intConstant      go to state 17
    exp              go to state 18
    functioncall     go to state 19
    leftexp          go to state 20
    statement        go to state 36
    statement_block  go to state 22
    assignment       go to state 23
    variable         go to state 24
    binArithExp      go to state 25


State 30

   16 variable: . "identifier"
   17 leftexp: . variable
   18 assignment: . leftexp "=" exp
   19 parameters: . parameters "," exp
   20           | . exp
   21           | . %empty  [")", ","]
   22 functioncall: . "identifier" "(" parameters ")" ";"
   22             | "identifier" "(" . parameters ")" ";"
   23 intConstant: . "number"
   24 binArithExp: . exp "+" exp
   25 exp: . intConstant
   26    | . assignment
   27    | . binArithExp
   28    | . variable
   29    | . "(" exp ")"
   30    | . functioncall
   31    | . %empty  ["+", ")", ","]

    "("           shift, and go to state 13
    "identifier"  shift, and go to state 15
    "number"      shift, and go to state 16

    "+"       reduce using rule 31 (exp)
    ")"       reduce using rule 21 (parameters)
    ")"       [reduce using rule 31 (exp)]
    ","       reduce using rule 21 (parameters)
    ","       [reduce using rule 31 (exp)]
    $default  reduce using rule 21 (parameters)

    intConstant   go to state 17
    exp           go to state 37
    functioncall  go to state 19
    leftexp       go to state 20
    parameters    go to state 38
    assignment    go to state 23
    variable      go to state 24
    binArithExp   go to state 25


State 31

   16 variable: . "identifier"
   17 leftexp: . variable
   18 assignment: . leftexp "=" exp
   22 functioncall: . "identifier" "(" parameters ")" ";"
   23 intConstant: . "number"
   24 binArithExp: . exp "+" exp
   24            | exp "+" . exp
   25 exp: . intConstant
   26    | . assignment
   27    | . binArithExp
   28    | . variable
   29    | . "(" exp ")"
   30    | . functioncall
   31    | . %empty  ["+", ")", ",", ";"]

    "("           shift, and go to state 13
    "identifier"  shift, and go to state 15
    "number"      shift, and go to state 16

    $default  reduce using rule 31 (exp)

    intConstant   go to state 17
    exp           go to state 39
    functioncall  go to state 19
    leftexp       go to state 20
    assignment    go to state 23
    variable      go to state 24
    binArithExp   go to state 25


State 32

   14 statement: exp ";" .

    $default  reduce using rule 14 (statement)


State 33

   16 variable: . "identifier"
   17 leftexp: . variable
   18 assignment: . leftexp "=" exp
   18           | leftexp "=" . exp
   22 functioncall: . "identifier" "(" parameters ")" ";"
   23 intConstant: . "number"
   24 binArithExp: . exp "+" exp
   25 exp: . intConstant
   26    | . assignment
   27    | . binArithExp
   28    | . variable
   29    | . "(" exp ")"
   30    | . functioncall
   31    | . %empty  ["+", ")", ",", ";"]

    "("           shift, and go to state 13
    "identifier"  shift, and go to state 15
    "number"      shift, and go to state 16

    $default  reduce using rule 31 (exp)

    intConstant   go to state 17
    exp           go to state 40
    functioncall  go to state 19
    leftexp       go to state 20
    assignment    go to state 23
    variable      go to state 24
    binArithExp   go to state 25


State 34

   29 exp: "(" exp ")" .

    $default  reduce using rule 29 (exp)


State 35

    9 statement_block: "{" statements "}" .

    $default  reduce using rule 9 (statement_block)


State 36

   11 statements: statements statement .

    $default  reduce using rule 11 (statements)


State 37

   20 parameters: exp .  [")", ","]
   24 binArithExp: exp . "+" exp

    "+"  shift, and go to state 31

    $default  reduce using rule 20 (parameters)


State 38

   19 parameters: parameters . "," exp
   22 functioncall: "identifier" "(" parameters . ")" ";"

    ")"  shift, and go to state 41
    ","  shift, and go to state 42


State 39

   24 binArithExp: exp . "+" exp
   24            | exp "+" exp .  ["+", ")", ",", ";"]

    $default  reduce using rule 24 (binArithExp)

    Conflict between rule 24 and token "+" resolved as reduce (%left "+").


State 40

   18 assignment: leftexp "=" exp .  ["+", ")", ",", ";"]
   24 binArithExp: exp . "+" exp

    "+"  shift, and go to state 31

    "+"       [reduce using rule 18 (assignment)]
    $default  reduce using rule 18 (assignment)


State 41

   22 functioncall: "identifier" "(" parameters ")" . ";"

    ";"  shift, and go to state 43


State 42

   16 variable: . "identifier"
   17 leftexp: . variable
   18 assignment: . leftexp "=" exp
   19 parameters: parameters "," . exp
   22 functioncall: . "identifier" "(" parameters ")" ";"
   23 intConstant: . "number"
   24 binArithExp: . exp "+" exp
   25 exp: . intConstant
   26    | . assignment
   27    | . binArithExp
   28    | . variable
   29    | . "(" exp ")"
   30    | . functioncall
   31    | . %empty  ["+", ")", ","]

    "("           shift, and go to state 13
    "identifier"  shift, and go to state 15
    "number"      shift, and go to state 16

    $default  reduce using rule 31 (exp)

    intConstant   go to state 17
    exp           go to state 44
    functioncall  go to state 19
    leftexp       go to state 20
    assignment    go to state 23
    variable      go to state 24
    binArithExp   go to state 25


State 43

   22 functioncall: "identifier" "(" parameters ")" ";" .

    $default  reduce using rule 22 (functioncall)


State 44

   19 parameters: parameters "," exp .  [")", ","]
   24 binArithExp: exp . "+" exp

    "+"  shift, and go to state 31

    $default  reduce using rule 19 (parameters)
